"""Test data fixtures for PyRunner tests"""

VALID_CODE_SAMPLES = {
    "basic_print": "print('Hello from PyRunner!')",
    "basic_math": "import math\nprint(f'π = {math.pi}')",
    "numpy_array": "import numpy as np\narr = np.array([1, 2, 3])\nprint(f'Array: {arr}')",
    "pandas_dataframe": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2]})\nprint(f'DataFrame:\\n{df}')",
    "sympy_symbol": "import sympy as sp\nx = sp.Symbol('x')\nprint(f'Symbol: {x}')",
    "matplotlib_version": "import matplotlib\nprint(f'Matplotlib version: {matplotlib.__version__}')",
    "scipy_version": "import scipy\nprint(f'SciPy version: {scipy.__version__}')",
    "sklearn_version": "import sklearn\nprint(f'Scikit-learn version: {sklearn.__version__}')",
    "collections_counter": "from collections import Counter\nc = Counter([1, 2, 2, 3])\nprint(f'Counter: {c}')",
    "itertools_combinations": "import itertools\nresult = list(itertools.combinations([1, 2, 3], 2))\nprint(f'Combinations: {result}')",
    "functools_reduce": "from functools import reduce\nresult = reduce(lambda x, y: x + y, [1, 2, 3, 4])\nprint(f'Sum: {result}')",
    "error_handling": "print('Before error')\nraise ValueError('Test error')\nprint('After error')",
    "math_calculations": "import math\nresult = math.sqrt(16) + math.pi\nprint(f'Result: {result}')",
    "complex_calculation": "import numpy as np\nimport math\nx = np.array([1, 2, 3, 4])\nresult = np.sum(x) + math.pi\nprint(f'Complex result: {result}')",
    "nested_imports": "from collections import defaultdict\ndd = defaultdict(int)\ndd['test'] = 1\nprint(f'Default dict: {dict(dd)}')",
    "valid_math_usage": "import math\nfrom math import sqrt\nprint(f'Square root of 16: {sqrt(16)}')",
}

INVALID_CODE_SAMPLES = {
    "os_import": "import os\nprint(os.getcwd())",
    "subprocess_call": "import subprocess\nresult = subprocess.run(['echo', 'test'])\nprint(result)",
    "sys_import": "import sys\nprint(sys.path)",
    "socket_import": "import socket\ns = socket.socket()\nprint(s)",
    "urllib_import": "import urllib.request\nprint(urllib.request)",
    "requests_import": "import requests\nprint(requests)",
    "time_import": "import time\nprint(time.sleep)",
    "threading_import": "import threading\nprint(threading.Thread)",
    "multiprocessing_import": "import multiprocessing\nprint(multiprocessing.Process)",
    "pickle_import": "import pickle\nprint(pickle.dumps)",
    "dynamic_import": "__import__('os').getcwd()",
    "getattr_bypass": "import builtins\ngetattr(builtins, '__import__')('os')",
    "exec_bypass": "exec('import os')",
    "eval_bypass": "eval('__import__(\"os\").getcwd()')",
    "nested_import": "from os import path\nprint(path)",
    "aliased_import": "import os as operating_system\nprint(operating_system)",
}

EXPECTED_OUTPUTS = {
    "basic_print": "Hello from PyRunner!",
    "basic_math": "π = 3.141592653589793",
    "numpy_array": "Array: [1 2 3]",
    "pandas_dataframe": "DataFrame:",
    "sympy_symbol": "Symbol: x",
    "matplotlib_version": "Matplotlib version:",
    "scipy_version": "SciPy version:",
    "sklearn_version": "Scikit-learn version:",
    "collections_counter": "Counter: Counter({2: 2, 1: 1, 3: 1})",
    "itertools_combinations": "Combinations: [(1, 2), (1, 3), (2, 3)]",
    "functools_reduce": "Sum: 10",
    "error_handling": "Before error",
    "math_calculations": "Result:",
    "complex_calculation": "Complex result:",
    "nested_imports": "Default dict: {'test': 1}",
    "valid_math_usage": "Square root of 16: 4.0",
}

EXPECTED_ERRORS = {
    "os_import": "os",
    "subprocess_call": "subprocess",
    "sys_import": "sys",
    "socket_import": "socket",
    "urllib_import": "urllib",
    "requests_import": "requests",
    "time_import": "time",
    "threading_import": "threading",
    "multiprocessing_import": "multiprocessing",
    "pickle_import": "pickle",
    "dynamic_import": "__import__",
    "getattr_bypass": "getattr",
    "exec_bypass": "exec",
    "eval_bypass": "eval",
    "nested_import": "os",
    "aliased_import": "os",
}

PERFORMANCE_TEST_CONFIGS = {
    "timeout_tests": [
        {"timeout": 1, "code": "import time\ntime.sleep(2)", "expected_status": "timeout"},
        {"timeout": 5, "code": "import math\nprint(math.pi)", "expected_status": "success"},
    ],
    "memory_tests": [
        {"memory_limit": 64, "code": "data = [0] * (1024 * 1024 * 100)", "expected_status": "memory_exceeded"},
        {"memory_limit": 256, "code": "import numpy as np\nprint(np.array([1, 2, 3]))", "expected_status": "success"},
    ],
    "cpu_intensive": [
        {"code": "result = sum(i*i for i in range(100000))\nprint(f'Result: {result}')", "expected_status": "success"},
        {"code": "while True:\n    pass", "expected_status": "timeout"},
    ]
}

ALLOWED_MODULES = [
    "math", "random", "json", "datetime", "decimal", "fractions", "statistics",
    "re", "string", "collections", "itertools", "functools", "operator",
    "numpy", "sympy", "pandas", "matplotlib", "scipy", "sklearn", "seaborn",
    "plotly", "bokeh", "altair", "networkx", "nltk", "spacy", "gensim",
    "typing", "dataclasses", "abc", "enum", "warnings", "copy", "pickle",
    "base64", "hashlib", "hmac", "secrets", "uuid", "struct", "array",
    "bisect", "heapq", "queue", "weakref", "types", "inspect", "dis",
    "importlib", "pkgutil", "modulefinder", "runpy", "ast", "keyword",
    "token", "tokenize", "tabnanny", "pyclbr", "py_compile", "compileall",
    "trace", "tracemalloc", "gc", "linecache", "unicodedata", "codecs",
    "io", "pathlib", "tempfile", "glob", "shutil", "pickle", "shelve",
    "dbm", "sqlite3", "zlib", "gzip", "bz2", "lzma", "zipfile", "tarfile",
    "csv", "configparser", "netrc", "xdrlib", "plistlib", "calendar",
    "locale", "gettext", "logging", "platform", "errno", "ctypes",
    "textwrap", "stringprep", "readline", "rlcompleter", "cmd", "shlex",
    "tkinter", "turtle", "colorsys", "imghdr", "sndhdr", "ossaudiodev",
    "aifc", "sunau", "wave", "chunk", "email", "mimetypes", "encodings",
    "codecs", "unicodedata", "stringprep", "difflib", "pprint", "reprlib",
    "enum", "numbers", "cmath", "decimal", "fractions", "random", "statistics",
    "itertools", "functools", "operator", "pathlib", "fileinput", "stat",
    "filecmp", "tempfile", "glob", "fnmatch", "linecache", "shutil", "macpath",
    "pickle", "copyreg", "shelve", "marshal", "dbm", "sqlite3", "zlib",
    "gzip", "bz2", "lzma", "zipfile", "tarfile", "csv", "configparser",
    "netrc", "xdrlib", "plistlib", "hashlib", "hmac", "secrets", "os",
    "io", "time", "argparse", "getopt", "logging", "getpass", "curses",
    "platform", "errno", "ctypes", "threading", "multiprocessing", "concurrent",
    "subprocess", "sched", "queue", "contextvars", "typing", "copy", "pprint",
    "reprlib", "enum", "numbers", "math", "cmath", "decimal", "fractions",
    "random", "statistics", "itertools", "functools", "operator", "pathlib",
    "os", "io", "time", "argparse", "getopt", "logging", "getpass", "curses",
    "platform", "errno", "ctypes", "threading", "multiprocessing", "concurrent",
    "subprocess", "sched", "queue", "contextvars", "asyncio", "socket",
    "ssl", "select", "selectors", "asyncore", "asynchat", "signal", "mmap",
    "email", "json", "mailcap", "mailbox", "mimetypes", "base64", "binhex",
    "binascii", "quopri", "uu", "html", "xml", "urllib", "http", "ftplib",
    "poplib", "imaplib", "nntplib", "smtplib", "smtpd", "telnetlib", "uuid",
    "socketserver", "xmlrpc", "ipaddress", "audioop", "aifc", "sunau",
    "wave", "chunk", "colorsys", "imghdr", "sndhdr", "ossaudiodev", "winreg",
    "winsound", "posix", "pwd", "spwd", "grp", "crypt", "termios", "tty",
    "pty", "fcntl", "pipes", "resource", "nis", "syslog", "optparse",
    "imp", "importlib", "pkgutil", "modulefinder", "runpy", "ast", "symtable",
    "symbol", "token", "keyword", "tokenize", "tabnanny", "pyclbr", "py_compile",
    "compileall", "dis", "pickletools", "distutils", "ensurepip", "venv",
    "zipapp", "pydoc", "doctest", "unittest", "test", "bdb", "faulthandler",
    "pdb", "timeit", "trace", "tracemalloc", "profile", "pstats", "gc",
    "sys", "sysconfig", "builtins", "main", "warnings", "dataclasses",
    "contextlib", "abc", "atexit", "traceback", "future", "typing", "typing_extensions"
]

BLOCKED_MODULES = [
    "os", "subprocess", "sys", "socket", "urllib", "requests", "time",
    "threading", "multiprocessing", "pickle", "shelve", "dbm", "sqlite3",
    "http", "ftplib", "poplib", "imaplib", "nntplib", "smtplib", "telnetlib",
    "socketserver", "xmlrpc", "ssl", "select", "selectors", "asyncore",
    "asynchat", "signal", "mmap", "email", "mailcap", "mailbox", "binhex",
    "binascii", "quopri", "uu", "html", "xml", "audioop", "winreg",
    "winsound", "posix", "pwd", "spwd", "grp", "crypt", "termios", "tty",
    "pty", "fcntl", "pipes", "resource", "nis", "syslog", "imp", "builtins",
    "main", "warnings", "atexit", "traceback", "future", "gc", "sys",
    "sysconfig", "faulthandler", "pdb", "timeit", "trace", "tracemalloc",
    "profile", "pstats", "bdb", "unittest", "test", "distutils", "ensurepip",
    "venv", "zipapp", "pydoc", "doctest", "pickletools", "dis", "compileall",
    "py_compile", "pyclbr", "tabnanny", "tokenize", "keyword", "token",
    "symbol", "symtable", "ast", "runpy", "modulefinder", "pkgutil",
    "importlib", "optparse"
]